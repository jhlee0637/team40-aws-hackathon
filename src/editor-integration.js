// Integration layer for Professional Map Editor with AWS Game
class EditorIntegration {
    constructor(game) {
        this.game = game;
        this.editor = null;
        this.isEditorActive = false;
        
        // UI elements
        this.editorToggleBtn = null;
        this.editorPanel = null;
        
        this.createEditorUI();
        this.setupEventListeners();
    }
    
    createEditorUI() {\n        // Create editor toggle button\n        this.editorToggleBtn = document.createElement('button');\n        this.editorToggleBtn.innerHTML = 'üõ†Ô∏è Professional Editor';\n        this.editorToggleBtn.style.cssText = `\n            position: fixed;\n            top: 10px;\n            right: 10px;\n            z-index: 1000;\n            padding: 10px 15px;\n            background: #FF9900;\n            color: white;\n            border: none;\n            border-radius: 5px;\n            font-family: monospace;\n            font-weight: bold;\n            cursor: pointer;\n            box-shadow: 0 2px 5px rgba(0,0,0,0.3);\n        `;\n        \n        document.body.appendChild(this.editorToggleBtn);\n        \n        // Create editor control panel\n        this.editorPanel = document.createElement('div');\n        this.editorPanel.style.cssText = `\n            position: fixed;\n            top: 60px;\n            right: 10px;\n            width: 300px;\n            background: rgba(35, 47, 62, 0.95);\n            border: 2px solid #FF9900;\n            border-radius: 8px;\n            padding: 15px;\n            z-index: 999;\n            display: none;\n            font-family: monospace;\n            color: white;\n            box-shadow: 0 4px 15px rgba(0,0,0,0.5);\n        `;\n        \n        this.editorPanel.innerHTML = `\n            <h3 style=\"margin: 0 0 15px 0; color: #FF9900;\">üéÆ Professional Map Editor</h3>\n            \n            <div style=\"margin-bottom: 15px;\">\n                <h4 style=\"margin: 0 0 8px 0; font-size: 12px;\">üé® Quick Tools</h4>\n                <div id=\"quickTools\" style=\"display: flex; flex-wrap: wrap; gap: 5px;\"></div>\n            </div>\n            \n            <div style=\"margin-bottom: 15px;\">\n                <h4 style=\"margin: 0 0 8px 0; font-size: 12px;\">üóÇÔ∏è Layer Management</h4>\n                <div id=\"layerControls\"></div>\n            </div>\n            \n            <div style=\"margin-bottom: 15px;\">\n                <h4 style=\"margin: 0 0 8px 0; font-size: 12px;\">üåç Terrain Generator</h4>\n                <button id=\"generateTerrain\" style=\"width: 100%; padding: 8px; background: #4CAF50; color: white; border: none; border-radius: 4px; cursor: pointer;\">Generate New Terrain</button>\n            </div>\n            \n            <div style=\"margin-bottom: 15px;\">\n                <h4 style=\"margin: 0 0 8px 0; font-size: 12px;\">üíæ Import/Export</h4>\n                <div style=\"display: flex; gap: 5px;\">\n                    <button id=\"exportMap\" style=\"flex: 1; padding: 6px; background: #2196F3; color: white; border: none; border-radius: 4px; cursor: pointer;\">Export</button>\n                    <button id=\"importMap\" style=\"flex: 1; padding: 6px; background: #9C27B0; color: white; border: none; border-radius: 4px; cursor: pointer;\">Import</button>\n                </div>\n            </div>\n            \n            <div style=\"font-size: 11px; color: #ccc; line-height: 1.4;\">\n                <strong>Shortcuts:</strong><br>\n                B: Paint | F: Fill | R: Rectangle | C: Circle<br>\n                S: Select | K: Clone | E: Eraser<br>\n                Ctrl+Z: Undo | Ctrl+Shift+Z: Redo<br>\n                1-5: Switch Layers | G: Toggle Grid\n            </div>\n        `;\n        \n        document.body.appendChild(this.editorPanel);\n        \n        this.setupPanelControls();\n    }\n    \n    setupPanelControls() {\n        // Quick tools\n        const quickToolsContainer = this.editorPanel.querySelector('#quickTools');\n        const tools = [\n            { name: 'paint', icon: 'üñåÔ∏è', key: 'B' },\n            { name: 'fill', icon: 'ü™£', key: 'F' },\n            { name: 'rectangle', icon: '‚¨ú', key: 'R' },\n            { name: 'circle', icon: '‚≠ï', key: 'C' },\n            { name: 'select', icon: 'üî≤', key: 'S' },\n            { name: 'clone', icon: 'üìã', key: 'K' },\n            { name: 'eraser', icon: 'üßΩ', key: 'E' }\n        ];\n        \n        tools.forEach(tool => {\n            const btn = document.createElement('button');\n            btn.innerHTML = tool.icon;\n            btn.title = `${tool.name} (${tool.key})`;\n            btn.style.cssText = `\n                width: 35px;\n                height: 35px;\n                background: #555;\n                color: white;\n                border: 1px solid #777;\n                border-radius: 4px;\n                cursor: pointer;\n                font-size: 16px;\n            `;\n            \n            btn.addEventListener('click', () => {\n                if (this.editor) {\n                    this.editor.setTool(tool.name);\n                    this.updateToolButtons();\n                }\n            });\n            \n            btn.dataset.tool = tool.name;\n            quickToolsContainer.appendChild(btn);\n        });\n        \n        // Layer controls\n        const layerControlsContainer = this.editorPanel.querySelector('#layerControls');\n        const layers = ['Background', 'Midground', 'Foreground', 'Objects', 'Events'];\n        \n        layers.forEach((layerName, index) => {\n            const layerDiv = document.createElement('div');\n            layerDiv.style.cssText = `\n                display: flex;\n                align-items: center;\n                margin-bottom: 5px;\n                padding: 4px;\n                background: #444;\n                border-radius: 3px;\n            `;\n            \n            const visibilityBtn = document.createElement('button');\n            visibilityBtn.innerHTML = 'üëÅ';\n            visibilityBtn.style.cssText = `\n                width: 25px;\n                height: 20px;\n                background: #4CAF50;\n                color: white;\n                border: none;\n                border-radius: 3px;\n                cursor: pointer;\n                margin-right: 8px;\n                font-size: 12px;\n            `;\n            \n            const layerLabel = document.createElement('span');\n            layerLabel.textContent = `${index + 1}. ${layerName}`;\n            layerLabel.style.cssText = `\n                flex: 1;\n                font-size: 12px;\n                cursor: pointer;\n            `;\n            \n            const opacitySlider = document.createElement('input');\n            opacitySlider.type = 'range';\n            opacitySlider.min = '0';\n            opacitySlider.max = '100';\n            opacitySlider.value = '100';\n            opacitySlider.style.cssText = `\n                width: 60px;\n                margin-left: 8px;\n            `;\n            \n            // Event listeners\n            visibilityBtn.addEventListener('click', () => {\n                if (this.editor) {\n                    const layer = this.editor.layers[index];\n                    layer.visible = !layer.visible;\n                    visibilityBtn.style.background = layer.visible ? '#4CAF50' : '#666';\n                    visibilityBtn.innerHTML = layer.visible ? 'üëÅ' : 'üö´';\n                }\n            });\n            \n            layerLabel.addEventListener('click', () => {\n                if (this.editor) {\n                    this.editor.currentLayer = index;\n                    this.updateLayerButtons();\n                }\n            });\n            \n            opacitySlider.addEventListener('input', (e) => {\n                if (this.editor) {\n                    this.editor.layers[index].opacity = e.target.value / 100;\n                }\n            });\n            \n            layerDiv.appendChild(visibilityBtn);\n            layerDiv.appendChild(layerLabel);\n            layerDiv.appendChild(opacitySlider);\n            layerControlsContainer.appendChild(layerDiv);\n            \n            layerDiv.dataset.layerIndex = index;\n        });\n        \n        // Terrain generator\n        this.editorPanel.querySelector('#generateTerrain').addEventListener('click', () => {\n            this.generateTerrain();\n        });\n        \n        // Export/Import\n        this.editorPanel.querySelector('#exportMap').addEventListener('click', () => {\n            this.exportMap();\n        });\n        \n        this.editorPanel.querySelector('#importMap').addEventListener('click', () => {\n            this.importMap();\n        });\n    }\n    \n    setupEventListeners() {\n        this.editorToggleBtn.addEventListener('click', () => {\n            this.toggleEditor();\n        });\n        \n        // Global keyboard shortcuts\n        document.addEventListener('keydown', (e) => {\n            if (this.isEditorActive && this.editor) {\n                // Handle editor-specific shortcuts\n                if (e.key === 'Escape') {\n                    this.toggleEditor();\n                }\n            }\n        });\n    }\n    \n    toggleEditor() {\n        this.isEditorActive = !this.isEditorActive;\n        \n        if (this.isEditorActive) {\n            this.activateEditor();\n        } else {\n            this.deactivateEditor();\n        }\n    }\n    \n    activateEditor() {\n        // Create editor instance if it doesn't exist\n        if (!this.editor) {\n            this.editor = new ProfessionalMapEditor(this.game.canvas);\n            \n            // Convert game map to editor format\n            this.convertGameMapToEditor();\n        }\n        \n        // Activate editor\n        this.editor.activate();\n        \n        // Update UI\n        this.editorToggleBtn.innerHTML = 'üéÆ Back to Game';\n        this.editorToggleBtn.style.background = '#f44336';\n        this.editorPanel.style.display = 'block';\n        \n        // Pause game\n        this.game.gameState = 'editor';\n        \n        // Update button states\n        this.updateToolButtons();\n        this.updateLayerButtons();\n        \n        console.log('Professional Map Editor activated!');\n    }\n    \n    deactivateEditor() {\n        if (this.editor) {\n            this.editor.deactivate();\n            \n            // Convert editor map back to game format\n            this.convertEditorMapToGame();\n        }\n        \n        // Update UI\n        this.editorToggleBtn.innerHTML = 'üõ†Ô∏è Professional Editor';\n        this.editorToggleBtn.style.background = '#FF9900';\n        this.editorPanel.style.display = 'none';\n        \n        // Resume game\n        this.game.gameState = 'overworld';\n        \n        console.log('Returned to game mode');\n    }\n    \n    convertGameMapToEditor() {\n        if (!this.game.map || !this.editor) return;\n        \n        // Convert single game map to multi-layer editor format\n        const gameMap = this.game.map;\n        \n        // Clear editor layers\n        this.editor.layers.forEach(layer => {\n            for (let y = 0; y < this.editor.mapHeight; y++) {\n                for (let x = 0; x < this.editor.mapWidth; x++) {\n                    layer.data[y][x] = 0;\n                }\n            }\n        });\n        \n        // Distribute game tiles to appropriate layers\n        for (let y = 0; y < Math.min(gameMap.length, this.editor.mapHeight); y++) {\n            for (let x = 0; x < Math.min(gameMap[y].length, this.editor.mapWidth); x++) {\n                const tileId = gameMap[y][x];\n                \n                // Distribute tiles to layers based on type\n                let targetLayer = 0; // Default to background\n                \n                if (tileId >= 1 && tileId <= 7) {\n                    targetLayer = 0; // Background - terrain\n                } else if (tileId >= 8 && tileId <= 15) {\n                    targetLayer = 2; // Foreground - buildings\n                } else if (tileId >= 16 && tileId <= 25) {\n                    targetLayer = 1; // Midground - objects\n                } else if (tileId >= 26) {\n                    targetLayer = 3; // Objects - NPCs/interactive\n                }\n                \n                this.editor.layers[targetLayer].data[y][x] = tileId;\n            }\n        }\n    }\n    \n    convertEditorMapToGame() {\n        if (!this.editor || !this.game) return;\n        \n        // Flatten editor layers into single game map\n        const newGameMap = [];\n        \n        for (let y = 0; y < this.editor.mapHeight; y++) {\n            const row = [];\n            for (let x = 0; x < this.editor.mapWidth; x++) {\n                let finalTile = 1; // Default grass\n                \n                // Combine layers (higher layers override lower ones)\n                for (let layerIndex = 0; layerIndex < this.editor.layers.length; layerIndex++) {\n                    const tileId = this.editor.layers[layerIndex].data[y][x];\n                    if (tileId !== 0) {\n                        finalTile = tileId;\n                    }\n                }\n                \n                row.push(finalTile);\n            }\n            newGameMap.push(row);\n        }\n        \n        // Update game map\n        this.game.map = newGameMap;\n        this.game.mapWidth = this.editor.mapWidth;\n        this.game.mapHeight = this.editor.mapHeight;\n        \n        // Save to current map slot\n        if (this.game.maps && this.game.currentMap !== undefined) {\n            this.game.maps[this.game.currentMap].data = JSON.parse(JSON.stringify(newGameMap));\n            this.game.saveMapData();\n        }\n    }\n    \n    updateToolButtons() {\n        if (!this.editor) return;\n        \n        const toolButtons = this.editorPanel.querySelectorAll('[data-tool]');\n        toolButtons.forEach(btn => {\n            const isActive = btn.dataset.tool === this.editor.currentTool;\n            btn.style.background = isActive ? '#FF9900' : '#555';\n            btn.style.borderColor = isActive ? '#FFB84D' : '#777';\n        });\n    }\n    \n    updateLayerButtons() {\n        if (!this.editor) return;\n        \n        const layerDivs = this.editorPanel.querySelectorAll('[data-layer-index]');\n        layerDivs.forEach(div => {\n            const layerIndex = parseInt(div.dataset.layerIndex);\n            const isActive = layerIndex === this.editor.currentLayer;\n            div.style.background = isActive ? '#555' : '#444';\n            div.style.border = isActive ? '1px solid #FF9900' : 'none';\n        });\n    }\n    \n    generateTerrain() {\n        if (!this.editor) return;\n        \n        const generator = new TerrainGenerator();\n        const options = {\n            seed: Math.random(),\n            scale: 0.05,\n            octaves: 4,\n            persistence: 0.5,\n            lacunarity: 2.0,\n            waterLevel: 0.3,\n            mountainLevel: 0.7\n        };\n        \n        const terrain = generator.generateTerrain(this.editor.mapWidth, this.editor.mapHeight, options);\n        \n        // Apply to background layer\n        this.editor.layers[0].data = terrain;\n        \n        // Generate some objects on midground layer\n        for (let y = 0; y < this.editor.mapHeight; y++) {\n            for (let x = 0; x < this.editor.mapWidth; x++) {\n                if (terrain[y][x] === 1 && Math.random() < 0.05) { // 5% chance for trees on grass\n                    this.editor.layers[1].data[y][x] = 10; // Tree\n                }\n            }\n        }\n        \n        console.log('New terrain generated!');\n    }\n    \n    exportMap() {\n        if (!this.editor) return;\n        \n        const mapData = this.editor.exportMap();\n        \n        // Create download link\n        const blob = new Blob([mapData], { type: 'application/json' });\n        const url = URL.createObjectURL(blob);\n        \n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `aws-nodeul-map-${Date.now()}.json`;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        \n        URL.revokeObjectURL(url);\n        \n        console.log('Map exported successfully!');\n    }\n    \n    importMap() {\n        if (!this.editor) return;\n        \n        const input = document.createElement('input');\n        input.type = 'file';\n        input.accept = '.json';\n        \n        input.onchange = (e) => {\n            const file = e.target.files[0];\n            if (!file) return;\n            \n            const reader = new FileReader();\n            reader.onload = (e) => {\n                const jsonData = e.target.result;\n                if (this.editor.importMap(jsonData)) {\n                    console.log('Map imported successfully!');\n                    this.updateLayerButtons();\n                } else {\n                    alert('Failed to import map. Please check the file format.');\n                }\n            };\n            reader.readAsText(file);\n        };\n        \n        input.click();\n    }\n    \n    // Render method to be called from game loop\n    render() {\n        if (this.isEditorActive && this.editor) {\n            this.editor.render();\n        }\n    }\n    \n    // Update method to be called from game loop\n    update() {\n        if (this.isEditorActive && this.editor) {\n            // Editor updates are handled by its own event system\n        }\n    }\n}\n\n// Export for use in main game\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = { EditorIntegration, ProfessionalMapEditor, AutoTileSystem, TerrainGenerator };\n}"